// Code generated by MockGen. DO NOT EDIT.
// Source: payment_processor_service.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPaymentProcessorService is a mock of PaymentProcessorService interface.
type MockPaymentProcessorService struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentProcessorServiceMockRecorder
}

// MockPaymentProcessorServiceMockRecorder is the mock recorder for MockPaymentProcessorService.
type MockPaymentProcessorServiceMockRecorder struct {
	mock *MockPaymentProcessorService
}

// NewMockPaymentProcessorService creates a new mock instance.
func NewMockPaymentProcessorService(ctrl *gomock.Controller) *MockPaymentProcessorService {
	mock := &MockPaymentProcessorService{ctrl: ctrl}
	mock.recorder = &MockPaymentProcessorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentProcessorService) EXPECT() *MockPaymentProcessorServiceMockRecorder {
	return m.recorder
}

// ProcessPayment mocks base method.
func (m *MockPaymentProcessorService) ProcessPayment(userID, cardID int64, amount float64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", userID, cardID, amount)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessPayment indicates an expected call of ProcessPayment.
func (mr *MockPaymentProcessorServiceMockRecorder) ProcessPayment(userID, cardID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockPaymentProcessorService)(nil).ProcessPayment), userID, cardID, amount)
}
