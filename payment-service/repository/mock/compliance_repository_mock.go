// Code generated by MockGen. DO NOT EDIT.
// Source: compliance_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockComplianceRepository is a mock of ComplianceRepository interface.
type MockComplianceRepository struct {
	ctrl     *gomock.Controller
	recorder *MockComplianceRepositoryMockRecorder
}

// MockComplianceRepositoryMockRecorder is the mock recorder for MockComplianceRepository.
type MockComplianceRepositoryMockRecorder struct {
	mock *MockComplianceRepository
}

// NewMockComplianceRepository creates a new mock instance.
func NewMockComplianceRepository(ctrl *gomock.Controller) *MockComplianceRepository {
	mock := &MockComplianceRepository{ctrl: ctrl}
	mock.recorder = &MockComplianceRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComplianceRepository) EXPECT() *MockComplianceRepositoryMockRecorder {
	return m.recorder
}

// CheckUserComplianceStatus mocks base method.
func (m *MockComplianceRepository) CheckUserComplianceStatus(userID, cardID int64) (bool, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUserComplianceStatus", userID, cardID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// CheckUserComplianceStatus indicates an expected call of CheckUserComplianceStatus.
func (mr *MockComplianceRepositoryMockRecorder) CheckUserComplianceStatus(userID, cardID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUserComplianceStatus", reflect.TypeOf((*MockComplianceRepository)(nil).CheckUserComplianceStatus), userID, cardID)
}
